{"version":3,"sources":["actions/index.js","containers/AddTodo.js","containers/ToDoList.js","App.js","serviceWorker.js","reducers/todos.js","reducers/index.js","store/index.js","index.js"],"names":["ACTIONS","AddTodo","Form","useForm","form","useState","value","setValue","dispatch","useDispatch","sendAction","type","item","resetFields","layout","Item","label","name","rules","required","message","onChange","e","target","onPressEnter","className","htmlType","onClick","ToDoList","todoList","useSelector","state","todoState","dataSource","renderItem","key","id","Meta","avatar","src","title","description","App","Boolean","window","location","hostname","match","initialState","reducers","combineReducers","action","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"6VAAaA,EACC,WCiCCC,EA7BC,WAAO,IAAD,EACHC,IAAKC,UAAbC,EADW,sBAEQC,mBAAS,IAFjB,mBAEXC,EAFW,KAEJC,EAFI,KAGZC,EAAWC,cAIXC,EAAa,WACF,KAAVJ,IACCE,EDVsB,CAC9BG,KAAMX,EACNY,KCQyBN,IACjBF,EAAKS,cACLN,EAAS,MAIjB,OACI,oCACI,kBAAC,IAAD,CAAMO,OAAO,WAAWV,KAAMA,GAC1B,kBAAC,IAAKW,KAAN,CAAWC,MAAM,QAAQC,KAAK,MAAMC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCACnE,kBAAC,IAAD,CAAOT,KAAK,OAAOL,MAAOA,EAAOe,SAd5B,SAACC,GAAD,OAAOf,EAASe,EAAEC,OAAOjB,QAc2BkB,aAAcd,MAG/E,yBAAKe,UAAU,cACX,kBAAC,IAAD,CAAQd,KAAK,UAAUe,SAAS,SAASC,QAASjB,GAAlD,a,kBCHDkB,EArBE,WAAO,IACbC,EAAYC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,aAAvCH,SAEP,OACI,oCACKA,GACG,kBAAC,IAAD,CAAMI,WAAYJ,EAClBK,WAAY,SAAAtB,GAAI,OACZ,kBAAC,IAAKG,KAAN,CAAWoB,IAAKvB,EAAKwB,IACjB,kBAAC,IAAKrB,KAAKsB,KAAX,CACIC,OAAQ,kBAAC,IAAD,CAAQC,IAAI,gEACpBC,MAAM,SACNC,YAAa7B,UCF1B8B,MATf,WACE,OACE,0BAAMjB,UAAU,iBACd,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8BClBAC,EAAe,CACjBnB,SAAU,ICEDoB,EAAWC,YAAgB,CACpClB,UDAiB,WAAmC,IAAlCD,EAAiC,uDAAzBiB,EAAcG,EAAW,uCACnD,OAAQA,EAAOxC,MACX,IAAK,WACD,OAAO,eAAIoB,EAAX,CAAkBF,SAAS,GAAD,mBAAME,EAAMF,UAAZ,CAAsBsB,EAAOvC,SAC3D,QACI,OAAOmB,MENNqB,EAAQC,YAAYJ,GCKjCK,IAASC,OACL,kBAAC,IAAD,CAAUH,MAAOA,GACb,kBAAC,EAAD,OACSI,SAASC,eAAe,SJwHnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM7C,c","file":"static/js/main.2fb6ada6.chunk.js","sourcesContent":["export const ACTIONS = {\r\n    ADD_TODO: 'ADD_TODO'\r\n}\r\n\r\nexport const addTodo = (item) => ({\r\n    type: ACTIONS.ADD_TODO,\r\n    item\r\n});","import React, { useState } from'react';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addTodo } from '../actions'\r\n\r\nconst AddTodo = () => {\r\n    const [form] = Form.useForm();\r\n    const [value, setValue] = useState('');\r\n    const dispatch = useDispatch();\r\n\r\n    const handleChange = (e) => setValue(e.target.value);\r\n\r\n    const sendAction = () => {\r\n        if(value !== '') {\r\n            dispatch(addTodo(value));\r\n            form.resetFields();\r\n            setValue('');\r\n        }\r\n    };\r\n\r\n    return(\r\n        <>\r\n            <Form layout=\"vertical\" form={form}>\r\n                <Form.Item label=\"To do\" name=\"add\" rules={[{ required: true, message: 'Por favor digite uma tarefa' }]}>\r\n                    <Input type=\"text\" value={value} onChange={handleChange} onPressEnter={sendAction} />\r\n                </Form.Item>\r\n            </Form>\r\n            <div className=\"text-right\">\r\n                <Button type=\"primary\" htmlType=\"submit\" onClick={sendAction}>enviar</Button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddTodo;","import React from 'react';\r\nimport { List, Avatar } from 'antd';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst ToDoList = () => {\r\n    const {todoList} = useSelector(state => state.todoState);\r\n\r\n    return(\r\n        <>\r\n            {todoList &&\r\n                <List dataSource={todoList} \r\n                renderItem={item => (\r\n                    <List.Item key={item.id}>\r\n                        <List.Item.Meta\r\n                            avatar={<Avatar src=\"https://zos.alipayobjects.com/rmsportal/UXamdIxYSkXfoVo.jpg\" />}\r\n                            title=\"tarefa\"\r\n                            description={item} />\r\n                    </List.Item>\r\n                )} >\r\n                </List>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ToDoList;","import React from 'react';\nimport './App.css';\nimport AddTodo from './containers/AddTodo';\nimport ToDoList from './containers/ToDoList';\n\nfunction App() {\n  return (\n    <main className=\"App container\">\n      <AddTodo />\n      <ToDoList />\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n    todoList: []\r\n}\r\n\r\nexport const todos = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_TODO':\r\n            return {...state, todoList: [...state.todoList, action.item]}\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport { todos } from './todos';\r\n\r\nexport const reducers = combineReducers({\r\n    todoState: todos,\r\n});\r\n","import { createStore } from 'redux';\r\nimport { reducers } from '../reducers';\r\n\r\nexport const store = createStore(reducers);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './store/index';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}